#Simplifying the sets
Controlo.sp <- Conjuncture_Controlo_wna[, c("ID Animal", "lon", "lat")]
Barb.sp <- Conjuncture_Barb_wna[, c("ID Animal", "lon", "lat")]
#Attributting coords
#https://stackoverflow.com/questions/68157684/set-crs-for-latitude-longitude-point-data
coordinates(Controlo.sp) <- c("lon", "lat")
coordinates(Barb.sp) <- c("lon", "lat")
#WGS84 is referenced to The International Reference Meridian.
#WGS84 lat/long coordinates are stationary with respect to the average of all
#global tectonic motions
proj4string(Controlo.sp) <- CRS("+init=epsg:4326 +proj=longlat +ellips=WGS84  +no_defs")
proj4string(Barb.sp) <- CRS("+init=epsg:4326 +proj=longlat +ellips=WGS84 +no_defs")
library(adehabitatHR)
Controlo.mcp <- mcp(Controlo.sp, percent = 95)
Barb.mcp <- mcp(Barb.sp, percent = 95)
library(scales)
plot(Controlo.mcp, col = as.factor(Controlo.mcp@data$id), pch = 16)
plot(Barb.mcp, col = alpha(1:5, 0.5), add = T)
#Now that we have the polygons, we need to calculate the centroids
#https://gis.stackexchange.com/questions/43543/how-to-calculate-polygon-centroids-in-r-for-non-contiguous-shapes
#Using rgeos pack and
#Using sp to convert into a spatialpointsdataframe so it can be plotted
Centroid_Barb <- gCentroid(Barb.mcp, byid = T)
SPDF_Centroid_Barb  <- SpatialPointsDataFrame(Centroid_Barb, data.frame(row.names = row.names(Centroid_Barb)))
Centroid_Controlo <- gCentroid(Controlo.mcp, byid = T)
SPDF_Centroid_Controlo  <- SpatialPointsDataFrame(Centroid_Controlo, data.frame(row.names = row.names(Centroid_Controlo)))
#Stitching them together
Coord_Barb_Morad_Simp <- Conjuncture_Barb_Moradas %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:4)) %>%
merge(Barbcleanclean, by = "ID Animal")
Coord_Control_Morad_Simp <- Conjuncture_Controlo_Moradas %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:3)) %>%
merge(Controlo, by = "ID Animal")
#Trying a plot
map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter, group = "Dark") %>%
addProviderTiles(provider = "Esri", group = "Light") %>%
addCircleMarkers(data = Conjuncture_Barb_Moradas,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`Código postal`,
group = "Cases",
clusterOptions = NULL,
radius = 2.5,
color = "red",
stroke = FALSE,
fillOpacity = 0.5) %>%
addCircleMarkers(data = Conjuncture_Controlo_Moradas,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`Código postal`,
group = "Controls",
radius = 2.5,
color = "blue",
stroke = FALSE,
fillOpacity = 0.7) %>%
addCircleMarkers(data = SPDF_Centroid_Barb,
group = "Centroids",
radius = 2.5,
color = "orange",
stroke = FALSE,
fillOpacity = 0.7) %>%
addCircles(data = SPDF_Centroid_Controlo,
group = "Centroids",
radius = 2.5,
color = "orange",
stroke = FALSE,
fillOpacity = 0.7) %>%
addPolygons(data = Controlo.mcp,
popup = ~id,
color = "Darkblue",
group = "Polygons") %>%
addPolygons(data = Barb.mcp,
popup = ~id,
color = "Yellow",
group = "Polygons") %>%
addLayersControl(baseGroups = c("Dark", "Light"),
overlayGroups = c("Cases", "Centroids", "Controls", "Official", "Polygons"),
options = layersControlOptions(collapsed = FALSE))
map
#Uploading and cleaning shape files
PT <-readOGR(".\\Barbara\\Cont_AAD_CAOP2020")
names(PT)
PT_Lisb <- PT[PT$Distrito == "Lisboa",]
PT_Sant <- PT[PT$Distrito == "Santarém",]
PT_Evor <- PT[PT$Distrito == "?vora",]
PT_Setu <- PT[PT$Distrito == "Setúbal",]
PT_Mad <- readOGR(".\\Barbara\\ArqMadeira_AAd_CAOP2020")
PT_Clean <- rbind(PT_Lisb, PT_Evor) %>%
rbind(PT_Sant) %>%
rbind(PT_Setu)
library(openrouteservice)
library(mapview)
# Cada key e pessoal, ver se funciona no teu tb
ors_api_key("5b3ce3597851110001cf6248a219fc66105d4bc5bacf80a7fbb1aab0")
mapviewOptions(fgb = FALSE)
coordinates <- data.frame(lon = c(-9.195503158186124) , lat = c(38.71392855624822))
res <- ors_isochrones(coordinates, range = 3600, interval = 1200, output = "sf")
res
values <- levels(factor(res$value))
ranges <- split(res, values)
ranges <- ranges[rev(values)]
names(ranges) <- sprintf("%s min", as.numeric(names(ranges))/60)
mapview(ranges, alpha.regions = 0.2, homebutton = FALSE, legend = FALSE)
FMV_coord <- c(-9.195503158186124, 38.7139285562482)
u <- Coord_Control_Morad_Simp %>%
group_by(`ID Animal`) %>%
group_modify(~add_row
(lon=-9.195503158186124, lat=38.7139285562482,.x)) %>%
ungroup()
u2 <- dplyr:: select(u, lon, lat)
u3 <- u2 [71:140,]
u4 <- u2 [1:70,]
u5 <- u2 [141:142,]
x <- ors_directions(u4)
y <- ors_directions(u3)
z <- ors_directions(u5)
# Directions to FMV UL from case points
v <- Coord_Barb_Morad_Simp %>%
group_by(`ID Animal`) %>%
group_modify(~add_row
(lon=-9.195503158186124, lat=38.7139285562482,.x)) %>%
ungroup() %>%
dplyr:: select(lon, lat)
v1 <- v [1:70,]  %>% drop_na()
v2 <- v [71:142,] %>% drop_na()
v3 <- v [142:210,] %>% drop_na()
v4 <- v [211:280,]
v5 <- v [281:296,]
# Ora aqui ha outro problema que e nao haver direçoes obviamente do funchal para a fmv pronto (acho que é o yy)
xx <- ors_directions(v1)
yy <- ors_directions(v2)
zz <- ors_directions(v3)
xxx <- ors_directions(v4)
yyy <- ors_directions(v5)
# Mapa com rotas de carro
leaflet() %>%
addTiles() %>%
addGeoJSON(x, fill=FALSE) %>%
addGeoJSON(y, fill=FALSE) %>%
addGeoJSON(z, fill=FALSE) %>%
addGeoJSON(xx, fill=FALSE) %>%
addGeoJSON(yy, fill=FALSE) %>%
addGeoJSON(zz, fill=FALSE) %>%
fitBBox(x$bbox)
# Directions to FMV UL from case points
v <- Coord_Barb_Morad_Simp %>%
group_by(`ID Animal`) %>%
drop_na() %>%
group_modify(~add_row
(lon=-9.195503158186124, lat=38.7139285562482,.x)) %>%
ungroup() %>%
dplyr:: select(lon, lat)
v1 <- v [1:70,]
View(v1)
v2 <- v [71:142,]
View(v2)
View(v2)
v3 <- v [142:210,]
View(v3)
v4 <- v [211:280,]
View(v4)
v5 <- v [281:296,]
# Ora aqui ha outro problema que e nao haver direçoes obviamente do funchal para a fmv pronto (acho que é o yy)
xx <- ors_directions(v1)
yy <- ors_directions(v2)
zz <- ors_directions(v3)
View(v2)
v2 <- v [71:140,]
View(v2)
yy <- ors_directions(v2)
v3 <- v [141:210,]
View(v3)
xxx <- ors_directions(v4)
yyy <- ors_directions(v5)
v5 <- v [281:296,]
yyy <- ors_directions(v5)
View(v5)
v5 <- v [281:286,]
View(v5)
yyy <- ors_directions(v5)
# Mapa com rotas de carro
leaflet() %>%
addTiles() %>%
addGeoJSON(x, fill=FALSE) %>%
addGeoJSON(y, fill=FALSE) %>%
addGeoJSON(z, fill=FALSE) %>%
addGeoJSON(xx, fill=FALSE) %>%
addGeoJSON(yy, fill=FALSE) %>%
addGeoJSON(zz, fill=FALSE) %>%
addGeoJSON(yyy, fill=FALSE) %>%
fitBBox(x$bbox)
?addGeoJSON
# Mapa com rotas de carro
leaflet() %>%
addTiles() %>%
addGeoJSON(x, fill=FALSE) %>%
addGeoJSON(y, fill=FALSE) %>%
addGeoJSON(z, fill=FALSE) %>%
addGeoJSON(xx, fill=FALSE, color = "Red") %>%
addGeoJSON(yy, fill=FALSE, color = "Red") %>%
addGeoJSON(zz, fill=FALSE, color = "Red") %>%
addGeoJSON(yyy, fill=FALSE, color = "Red") %>%
fitBBox(x$bbox)
?ors_directions
?ors_profile
x_public <- ors_directions(u4,profile="walking")
x_public <- ors_directions(u4,profile="foot-walking")
leaflet() %>%
addTiles() %>%
addGeoJSON(x_public, fill=FALSE)
leaflet() %>%
addTiles() %>%
addGeoJSON(x_public, fill=FALSE) %>%
fitBBox(x$bbox)
# Mapa com rotas a pe
x_foot <- ors_directions(u4,profile="foot-walking")
install.packages("HereR")
install.packages("hereR")
# Mapa com public transport
# So this is fun, o ORS nao tem isso
library(hereR)
HERE Public Transit API: Transit Route
?connection
set_key("6O70u-gneZ_0CbZj7hDQ0nX88HOHFSmkzgwC9DLGFQ0")
hereR:: connection(
x[1,],
FMV_coord
)
hereR:: connection(
x[1:2,],
FMV_coord
)
b <- st_as_sf(v5)
?st_as_sf
b <- st_as_sf(v5, c(2:3))
b <- st_as_sf(v5, coords=c(2:3))
b <- st_as_sf(v5, coords=c(1:2))
View(b)
hereR:: connection(
b,
FMV_coord
)
hereR:: connection(
b[1:2,],
b[3:4]
)
hereR:: connection(
b[1:2,],
b[1:2,]
)
hereR:: connection(
origin=b[1:2,],
destination=b[1:2,]
)
poi
view(poi)
v5
b
poi
b <- st_as_sf(v5, coords=c(1:2)) >% st_set_crs(4326) %>% st_transform(crs=32736)
b <- st_as_sf(v5, coords=c(1:2)) %>% st_set_crs(4326) %>% st_transform(crs=32736)
b
hereR:: connection(
origin=b[1:2,],
destination=b[1:2,]
)
hereR:: connection(
origin=b[1:2,],
destination=b[3:4,]
)
hereR:: connection(
origin=b[1,],
destination=b[2,]
)
hereR:: connection(
origin=b[n,],
destination=b[n+1,]
)
hereR:: connection(
origin=b[1,],
destination=b[2,]
)
hereR:: connection(
origin=b[1,],
destination=b[2,],
summary=TRUE
)
c <- hereR:: connection(
origin=b[1,],
destination=b[2,],
summary=TRUE
)
class(c)
leaflet(c) %>%
addTiles()
plot(c)
#Uploading and cleaning shape files
PT <-readOGR("\\Other_projects\\Barbara\\Cont_AAD_CAOP2020")
library(data.table)
library(dplyr)
library(leaflet)
library(rgeos)
library(ggplot2)
library(sf)
library(sp)
library(rgdal)
library(maptools)
library(tidyverse)
library(adehabitatHR)
library(openrouteservice)
library(mapview)
#Uploading and cleaning shape files
PT <-readOGR("\\Other_projects\\Barbara\\Cont_AAD_CAOP2020")
#Uploading and cleaning shape files
PT <-readOGR("\\Other_projects\\Barbara\\Cont_AAD_CAOP2020")
#Uploading and cleaning shape files
PT <-readOGR(".\\Other_projects\\Barbara\\Cont_AAD_CAOP2020")
#Uploading and cleaning shape files
PT <-readOGR(".\\Other_projects\\Barbara\\Cont_AAD_CAOP2020")
#Loading and cleaning data
Barb <- fread(".\\Barbara\\Codigo Postal - Barbara.csv")
#Uploading and cleaning shape files
PT <-readOGR(".\\Barbara\\Cont_AAD_CAOP2020")
View(PT)
View(PT)
names(PT)
summary(PT$Des_Simpli)
summary(PT$TAA)
Moradas <- fread(".\\Other_projects\\Barbara\\pt_addresses.csv") %>%
unique
library(data.table)
library(tidyverse)
library(leaflet)
library(rgeos)
library(ggplot2)
library(sf)
library(sp)
library(rgdal)
library(maptools)
library(tidyverse)
library(adehabitatHR)
library(openrouteservice)
library(mapview)
#Loading and cleaning data
Barb <- fread(".\\Barbara\\Codigo Postal - Barbara.csv")
View(Barb)
Barbclean <- subset(Barb, select = -V3)
Barbclean <- subset(Barb, select = -V3) %>%
unique %>%
rename(Cod_Postal =`Codigo postal`)
Barbcleanclean <- Barbclean[1:148, ]
#Making sure we dont lose the control group, extracting and creating a new df
Controlo <- Barbclean[150:220, ] %>%
subset(select = -V3)
View(Barbclean)
unique
Moradas <- fread(".\\Other_projects\\Barbara\\pt_addresses.csv") %>%
unique
Moradas <- fread(".\\Other_projects\\Barbara\\pt_addresses - Copy.csv") %>%
unique
Moradas <- fread(".\\Other_projects\\Barbara\\pt_addresses - Copy.csv") %>%
unique
Moradas <- fread(".\\Barbara\\pt_addresses - Copy.csv") %>%
unique
#Grouping and taking the average of the coords (without converting into xy)
Conjuncture_Controlo_Moradas <- merge(Controlo, Moradas[ ,c("city", "postcode", "lon", "lat")],
by.x = "Cod_Postal",
by.y = "postcode",
all.x = T) %>%
group_by(`ID Animal`) %>%
unique
#Making sure we dont lose the control group, extracting and creating a new df
Controlo <- Barbclean[150:220, ]
#Grouping and taking the average of the coords (without converting into xy)
Conjuncture_Controlo_Moradas <- merge(Controlo, Moradas[ ,c("city", "postcode", "lon", "lat")],
by.x = "Cod_Postal",
by.y = "postcode",
all.x = T) %>%
group_by(`ID Animal`) %>%
unique
Conjuncture_Barb_Moradas <- merge(Barbcleanclean, Moradas[ , c("city", "postcode", "lon", "lat")],
by.x = "Cod_Postal",
by.y = "postcode",
all.x = T) %>%
group_by(`ID Animal`) %>%
unique
View(Conjuncture_Controlo_Moradas)
View(Moradas)
#Uploading and cleaning shape files
PT <-readOGR(".\\Barbara\\Cont_AAD_CAOP2020")
names(PT)
View(Moradas)
NUTS <- fread(".\\Barbara\\NUTS.csv")
View(NUTS)
Controlo_com_NUTS <- merge(Conjuncture_Controlo_Moradas, NUTS,
by.x = "city",
by.y = "`MunicÃ­pios`")
NUTS <- fread(".\\Barbara\\NUTS.csv")
Controlo_com_NUTS <- merge(Conjuncture_Controlo_Moradas, NUTS,
by.x = "city",
by.y = "`MunicÃ­pios`")
Controlo_com_NUTS <- merge(Conjuncture_Controlo_Moradas, NUTS,
by.x = "city",
by.y = "`Municipios`")
View(NUTS)
Controlo_com_NUTS <- merge(Conjuncture_Controlo_Moradas, NUTS,
by.x = "city",
by.y = "Municipios")
View(Controlo_com_NUTS)
Controlo_com_NUTS <- merge(Conjuncture_Controlo_Moradas, NUTS,
by.x = "city",
by.y = "Municipios",
all.x = T)
View(Controlo_com_NUTS)
?merge
?fread
Moradas <- fread(".\\Barbara\\pt_addresses - Copy.csv", encoding = "Latin-1") %>%
unique
Moradas <- fread(".\\Barbara\\pt_addresses - Copy.csv", encoding = "UTF-8") %>%
unique
NUTS <- fread(".\\Barbara\\NUTS.csv", encoding= "UTF-8")
#Grouping and taking the average of the coords (without converting into xy)
Conjuncture_Controlo_Moradas <- merge(Controlo, Moradas[ ,c("city", "postcode", "lon", "lat")],
by.x = "Cod_Postal",
by.y = "postcode",
all.x = T) %>%
group_by(`ID Animal`) %>%
unique
Controlo_com_NUTS <- merge(Conjuncture_Controlo_Moradas, NUTS,
by.x = "city",
by.y = "Municipios",
all.x = T)
?tolower
Moradas <- fread(".\\Barbara\\pt_addresses - Copy.csv", encoding = "UTF-8") %>%
unique %>%
tolower("city")
Moradas <- fread(".\\Barbara\\pt_addresses - Copy.csv", encoding = "UTF-8") %>%
unique %>%
tolower(city)
Moradas <- tolower(Moradas$city)
class(Moradas$city)
class(Moradas)
Moradas <- tolower(Moradas$city[])
Moradas <- fread(".\\Barbara\\pt_addresses - Copy.csv", encoding = "UTF-8") %>%
unique %>%
casefold("city", upper=F)
Moradas <- fread(".\\Barbara\\pt_addresses - Copy.csv", encoding = "UTF-8") %>%
unique %>%
casefold(["city"], upper=F)
?casefold
class(Moradas)
Moradas <- fread(".\\Barbara\\pt_addresses - Copy.csv", encoding = "UTF-8") %>%
unique %>%
mutate_if(is.character, str_to_lower) -> Moradas
View(Moradas)
NUTS <- fread(".\\Barbara\\NUTS.csv", encoding= "UTF-8") %>%
mutate_if(is.character, str_to_lower) -> NUTS
View(NUTS)
Controlo_com_NUTS <- merge(Conjuncture_Controlo_Moradas, NUTS,
by.x = "city",
by.y = "Municipios",
all.x = T)
View(Controlo_com_NUTS)
#Grouping and taking the average of the coords (without converting into xy)
Conjuncture_Controlo_Moradas <- merge(Controlo, Moradas[ ,c("city", "postcode", "lon", "lat")],
by.x = "Cod_Postal",
by.y = "postcode",
all.x = T) %>%
group_by(`ID Animal`) %>%
unique
Controlo_com_NUTS <- merge(Conjuncture_Controlo_Moradas, NUTS,
by.x = "city",
by.y = "Municipios",
all.x = T)
View(Controlo_com_NUTS)
library(data.table)
library(tidyverse)
library(leaflet)
library(rgeos)
library(ggplot2)
library(sf)
library(sp)
library(rgdal)
library(maptools)
library(tidyverse)
library(adehabitatHR)
library(openrouteservice)
library(mapview)
#Loading data
Barb <- fread(".\\Barbara\\Codigo Postal - Barbara.csv")
Moradas <- fread(".\\Barbara\\pt_addresses.csv", encoding = "UTF-8") %>%
unique %>%
mutate_if(is.character, str_to_lower) -> Moradas
# Cleaning data
Barb <- subset(Barb, select = -V3) %>%
unique %>%
rename(Cod_Postal =`Codigo postal`)
Casos <- Barb[1:148, ]
Controlo <- Barb[150:220, ]
#Grouping and taking the average of the coords (without converting into xy)
Conjuncture_Controlo_Moradas <- merge(Controlo, Moradas[ ,c("city", "postcode", "lon", "lat")],
by.x = "Cod_Postal",
by.y = "postcode",
all.x = T) %>%
group_by(`ID Animal`) %>%
unique
View(Conjuncture_Controlo_Moradas)
