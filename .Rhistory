icon_casos <- makeIcon(
iconUrl = "https://www.google.com/url?sa=i&url=https%3A%2F%2Fcommons.wikimedia.org%2Fwiki%2FFile%3AFont_Awesome_5_solid_square.svg&psig=AOvVaw2ssjMdtEaS5kN6NldtRlub&ust=1674589356794000&source=images&cd=vfe&ved=0CBAQjRxqFwoTCPDa1M-53vwCFQAAAAAdAAAAABAJ",
iconWidth = 20, iconHeight = 20
)
xx <- leaflet() %>%
addTiles() %>%
addGeoJSON(iso_gjson,
color="purple",
group = "Isochrone") %>%
addMarkers(data = Coord_Barb_Morad_Simp,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "Casos",
icon = icon_casos
# radius = 2.5,
# color = "blue",
# stroke = FALSE,
# fillOpacity = 0.7
) %>%
addCircleMarkers(data = Coord_Control_Morad_Simp,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "Controlos",
radius = 2.5,
color = "red",
stroke = FALSE,
fillOpacity = 0.7) %>%
addGeoJSON(casos_dir_gjson,
fill = FALSE,
group="Casos") %>%
addGeoJSON(controlos_dir_gjson,
fill = FALSE,
color = "red",
group="Controlos") %>%
addLayersControl(overlayGroups = c("Casos", "Controlos", "Isochrone"),
options = layersControlOptions(collapsed = FALSE))
xx
# mapa com leaflet
icon_casos <- makeIcon(
iconUrl = "https://www.google.com/url?sa=i&url=https%3A%2F%2Fcommons.wikimedia.org%2Fwiki%2FFile%3AFont_Awesome_5_solid_square.svg&psig=AOvVaw2ssjMdtEaS5kN6NldtRlub&ust=1674589356794000&source=images&cd=vfe&ved=0CBAQjRxqFwoTCPDa1M-53vwCFQAAAAAdAAAAABAJ",
iconWidth = 20, iconHeight = 20,
iconAnchorX = 22, iconAnchorY = 94
)
xx <- leaflet() %>%
addTiles() %>%
addGeoJSON(iso_gjson,
color="purple",
group = "Isochrone") %>%
addMarkers(data = Coord_Barb_Morad_Simp,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "Casos",
icon = icon_casos
# radius = 2.5,
# color = "blue",
# stroke = FALSE,
# fillOpacity = 0.7
) %>%
addCircleMarkers(data = Coord_Control_Morad_Simp,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "Controlos",
radius = 2.5,
color = "red",
stroke = FALSE,
fillOpacity = 0.7) %>%
addGeoJSON(casos_dir_gjson,
fill = FALSE,
group="Casos") %>%
addGeoJSON(controlos_dir_gjson,
fill = FALSE,
color = "red",
group="Controlos") %>%
addLayersControl(overlayGroups = c("Casos", "Controlos", "Isochrone"),
options = layersControlOptions(collapsed = FALSE))
xx
# mapa com leaflet
icon_casos <- makeIcon(
iconUrl = "http://leafletjs.com/examples/custom-icons/leaf-green.png",
iconWidth = 20, iconHeight = 20,
iconAnchorX = 22, iconAnchorY = 94
)
xx <- leaflet() %>%
addTiles() %>%
addGeoJSON(iso_gjson,
color="purple",
group = "Isochrone") %>%
addMarkers(data = Coord_Barb_Morad_Simp,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "Casos",
icon = icon_casos
# radius = 2.5,
# color = "blue",
# stroke = FALSE,
# fillOpacity = 0.7
) %>%
addCircleMarkers(data = Coord_Control_Morad_Simp,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "Controlos",
radius = 2.5,
color = "red",
stroke = FALSE,
fillOpacity = 0.7) %>%
addGeoJSON(casos_dir_gjson,
fill = FALSE,
group="Casos") %>%
addGeoJSON(controlos_dir_gjson,
fill = FALSE,
color = "red",
group="Controlos") %>%
addLayersControl(overlayGroups = c("Casos", "Controlos", "Isochrone"),
options = layersControlOptions(collapsed = FALSE))
xx
leaflet_map <- leaflet() %>%
addTiles() %>%
addMarkers(data = Coord_Barb_Morad_Simp,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "Casos",
radius = 2.5,
color = "blue",
stroke = FALSE,
fillOpacity = 0.7) %>%
addCircleMarkers(data = Coord_Control_Morad_Simp,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "Controlos",
radius = 2.5,
color = "red",
stroke = FALSE,
fillOpacity = 0.7) %>%
addGeoJSON(casos_dir_gjson,
fill = FALSE,
group="Casos") %>%
addGeoJSON(controlos_dir_gjson,
fill = FALSE,
color = "red",
group="Controlos") %>%
addLayersControl(overlayGroups = c("Casos", "Controlos", "Isochrone"),
options = layersControlOptions(collapsed = FALSE))
leaflet_map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = Coord_Barb_Morad_Simp,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "Casos",
radius = 2.5,
color = "blue",
stroke = FALSE,
fillOpacity = 0.7) %>%
addCircleMarkers(data = Coord_Control_Morad_Simp,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "Controlos",
radius = 2.5,
color = "red",
stroke = FALSE,
fillOpacity = 0.7) %>%
addGeoJSON(casos_dir_gjson,
fill = FALSE,
group="Casos") %>%
addGeoJSON(controlos_dir_gjson,
fill = FALSE,
color = "red",
group="Controlos") %>%
addLayersControl(overlayGroups = c("Casos", "Controlos", "Isochrone"),
options = layersControlOptions(collapsed = FALSE))
leaflet_map
leaflet_map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = Coord_Barb_Morad_Simp,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "Casos",
radius = 2.5,
color = "blue",
stroke = FALSE,
fillOpacity = 0.7) %>%
addCircleMarkers(data = Coord_Control_Morad_Simp,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "Controlos",
radius = 2.5,
color = "red",
stroke = FALSE,
fillOpacity = 0.7) %>%
addGeoJSON(casos_dir_gjson,
fill = FALSE,
group="Casos") %>%
addGeoJSON(controlos_dir_gjson,
fill = FALSE,
color = "red",
group="Controlos") %>%
addLayersControl(overlayGroups = c("Casos", "Controlos"),
options = layersControlOptions(collapsed = FALSE))
leaflet_map
library(data.table)
library(tidyverse)
library(geosphere)
library(leaflet)
library(openrouteservice)
library(xlsx)
# Estou a correr o ors localmente com o docker, entao esta neste url
options(openrouteservice.url = "http://localhost:8080/ors")
#Loading and cleaning data
Barb <- fread(".\\Barbara\\Codigo Postal - Barbara.csv")
Moradas <- fread(".\\Barbara\\pt_addresses.csv", encoding = "UTF-8") %>%
unique %>%
mutate_if(is.character, str_to_lower) -> Moradas
Resultados <- fread(".\\Barbara\\Resultados.csv",encoding = "UTF-8") %>%
unique %>%
dplyr::select(-"Cód. postal")
Resultados <- Resultados[1:219,]
Resultados$`Tipo SMS` <- as.character(Resultados$`Tipo SMS`)
Resultados$`Tipo SMS` <- ifelse(is.na(Resultados$`Tipo SMS`),
'não', Resultados$`Tipo SMS`)
Barb <- subset(Barb, select = -V3) %>%
unique %>%
rename(Cod_Postal =`Codigo postal`)
Casos <- Barb[1:148, ]
Controlo <- Barb[150:220, ]
#Grouping with coords (sem converter para xy)
Controlo_com_Moradas <- merge(Controlo, Moradas[ ,c("city", "postcode", "lon", "lat")],
by.x = "Cod_Postal",
by.y = "postcode",
all.x = T) %>%
group_by(`ID Animal`) %>%
unique
Casos_com_Moradas <- merge(Casos, Moradas[ , c("city", "postcode", "lon", "lat")],
by.x = "Cod_Postal",
by.y = "postcode",
all.x = T) %>%
group_by(`ID Animal`) %>%
unique
# Calculo do centroide das coordenadas
findCentroid <- function(Lon, Lat, ...){
centroid(cbind(Lon, Lat), ...)
}
CasosDT <-setDT(Casos_com_Moradas) %>%
group_by(`ID Animal`) %>%
filter(n()>= 3) %>%
ungroup()
CasosDT <-setDT(CasosDT)
CasosDT[, c("Cent_lon", "Cent_lat") := as.list(findCentroid(lon, lat)), by = `ID Animal`]
Casos_centroide <- as.data.frame(CasosDT) %>%
subset(select=c("Cod_Postal","ID Animal","city","Cent_lon","Cent_lat")) %>%
group_by(`ID Animal`) %>%
unique
ControloDT <-setDT(Controlo_com_Moradas ) %>%
group_by(`ID Animal`) %>%
filter(n()>= 4) %>%
ungroup()
ControloDT <-setDT(ControloDT)
ControloDT[, c("Cent_lon", "Cent_lat") := as.list(findCentroid(lon, lat)), by = `ID Animal`]
Controlo_centroide <- as.data.frame(ControloDT) %>%
subset(select=c("Cod_Postal","ID Animal","city","Cent_lon","Cent_lat")) %>%
group_by(`ID Animal`) %>%
unique
# Agr juntar as Df pq tenho de ir buscar os que faltam pq tinham <3 ou <4 de pontos
Coord_casos <- Casos_com_Moradas %>%
group_by(`ID Animal`) %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:3)) %>%
merge(Casos_centroide, by.x = "ID Animal", by.y="ID Animal", all.x=TRUE) %>%
merge(Casos, by.x = "ID Animal", by.y="ID Animal") %>%
subset(select=-c(4))
Coord_casos$Cent_lon <- ifelse(is.na(Coord_casos$Cent_lon), Coord_casos$lon, Coord_casos$Cent_lon)
Coord_casos$Cent_lat <- ifelse(is.na(Coord_casos$Cent_lat), Coord_casos$lat, Coord_casos$Cent_lat)
Coord_casos <- Coord_casos[,c(1,7,4:6)]
Coord_casos<- Coord_casos %>%
rename(lat=Cent_lat) %>%
rename(lon=Cent_lon)
Coord_controlo <- Controlo_com_Moradas  %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:3)) %>%
merge(Controlo_centroide, by.x = "ID Animal", by.y="ID Animal", all.x=TRUE) %>%
merge(Controlo, by.x = "ID Animal", by.y="ID Animal") %>%
subset(select=-c(4))
Coord_controlo$Cent_lon <- ifelse(is.na(Coord_controlo$Cent_lon), Coord_controlo$lon, Coord_controlo$Cent_lon)
Coord_controlo$Cent_lat <- ifelse(is.na(Coord_controlo$Cent_lat), Coord_controlo$lat, Coord_controlo$Cent_lat)
Coord_controlo <- Coord_controlo[,c(1,7,4:6)]
Coord_controlo <- Coord_controlo %>%
rename(lat=Cent_lat) %>%
rename(lon=Cent_lon)
Controlo_com_Moradas <- merge(Controlo, Moradas[ ,c("city", "postcode", "lon", "lat")],
by.x = "Cod_Postal",
by.y = "postcode",
all.x = T) %>%
group_by(`ID Animal`) %>%
unique
ControloDT <-setDT(Controlo_com_Moradas ) %>%
group_by(`ID Animal`) %>%
filter(n()>= 4) %>%
ungroup()
ControloDT <-setDT(ControloDT)
ControloDT[, c("Cent_lon", "Cent_lat") := as.list(findCentroid(lon, lat)), by = `ID Animal`]
Controlo_centroide <- as.data.frame(ControloDT) %>%
subset(select=c("Cod_Postal","ID Animal","city","Cent_lon","Cent_lat")) %>%
group_by(`ID Animal`) %>%
unique
Coord_controlo <- Controlo_com_Moradas  %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:3)) %>%
merge(Controlo_centroide, by.x = "ID Animal", by.y="ID Animal", all.x=TRUE) %>%
merge(Controlo, by.x = "ID Animal", by.y="ID Animal") %>%
subset(select=-c(4))
Coord_controlo$Cent_lon <- ifelse(is.na(Coord_controlo$Cent_lon), Coord_controlo$lon, Coord_controlo$Cent_lon)
Coord_controlo$Cent_lat <- ifelse(is.na(Coord_controlo$Cent_lat), Coord_controlo$lat, Coord_controlo$Cent_lat)
Coord_controlo <- Coord_controlo[,c(1,7,4:6)]
Coord_controlo <- Coord_controlo %>%
rename(lat=Cent_lat) %>%
rename(lon=Cent_lon)
Coord_controlo <- Controlo_com_Moradas  %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:3)) %>%
merge(Controlo_centroide, by.x = "ID Animal", by.y="ID Animal", all.x=TRUE) %>%
merge(Controlo, by.x = "ID Animal", by.y="ID Animal") %>%
subset(select=-c(4))
#Grouping with coords (sem converter para xy)
Controlo_com_Moradas <- merge(Controlo, Moradas[ ,c("city", "postcode", "lon", "lat")],
by.x = "Cod_Postal",
by.y = "postcode",
all.x = T) %>%
group_by(`ID Animal`) %>%
unique
Coord_controlo <- Controlo_com_Moradas  %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:3)) %>%
merge(Controlo_centroide, by.x = "ID Animal", by.y="ID Animal", all.x=TRUE) %>%
merge(Controlo, by.x = "ID Animal", by.y="ID Animal") %>%
subset(select=-c(4))
Coord_controlo$Cent_lon <- ifelse(is.na(Coord_controlo$Cent_lon), Coord_controlo$lon, Coord_controlo$Cent_lon)
Coord_controlo$Cent_lat <- ifelse(is.na(Coord_controlo$Cent_lat), Coord_controlo$lat, Coord_controlo$Cent_lat)
Coord_controlo <- Coord_controlo[,c(1,7,4:6)]
Coord_controlo <- Coord_controlo %>%
rename(lat=Cent_lat) %>%
rename(lon=Cent_lon)
controlo_para_dir <- Coord_controlo %>%
group_by(`ID Animal`) %>%
group_modify(~add_row
(lon=-9.195503158186124, lat=38.7139285562482,.x)) %>%
ungroup() %>%
dplyr:: select(lon, lat)
controlos_dir <- ors_directions(controlo_para_dir)
casos_para_dir <- Coord_casos %>%
group_by(`ID Animal`) %>%
drop_na() %>%
subset(city!="funchal") %>% #Retirar a madeira pq n dá rota né
group_modify(~add_row
(lon=-9.195503158186124, lat=38.7139285562482,.x)) %>%
ungroup() %>%
dplyr:: select(lon, lat)
casos_dir <- ors_directions(casos_para_dir)
### Mapa com routes e pontos
# Mudar para pontos de controlos, caos com LP e casos com MP
leaflet_map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = Coord_casos,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "Casos",
radius = 2.5,
color = "blue",
stroke = FALSE,
fillOpacity = 0.7) %>%
addCircleMarkers(data = Coord_controlo,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "Controlos",
radius = 2.5,
color = "red",
stroke = FALSE,
fillOpacity = 0.7) %>%
addGeoJSON(casos_dir,
fill = FALSE,
group="Casos") %>%
addGeoJSON(controlos_dir,
fill = FALSE,
color = "red",
group="Controlos") %>%
addLayersControl(overlayGroups = c("Casos", "Controlos"),
options = layersControlOptions(collapsed = FALSE))
leaflet_map
Caso_FMV <- Coord_casos %>%
dplyr:: select(lon, lat) %>%
drop_na() %>%
add_row (lon=-9.195503158186124, lat=38.7139285562482)
matrix_casos <- ors_matrix(Caso_FMV, metrics = c("duration", "distance"), units = "km")
(matrix_casos$durations/60) %>%  round(1)
Controlo_FMV <- Coord_controlo %>%
add_row (lon=-9.195503158186124, lat=38.7139285562482) %>%
dplyr:: select(lon, lat)
matrix_controlo <- ors_matrix(Controlo_FMV, metrics = c("duration", "distance"), units = "km")
(matrix_controlo$durations/60) %>%  round(1)
casos_p_matrix <- Coord_casos %>%
dplyr:: select(lon, lat) %>%
drop_na()
controlo_p_matrix <- Coord_controlo
matrix_dist_carro_casos <- as.data.frame(matrix_casos$distances) %>%
subset(select = c(144)) %>%
slice(-c(144)) %>%
rename(`Distancia (de carro, em km) a HEFMV` = V144) %>%
cbind(casos_p_matrix)
matrix_temp_carro_casos <- as.data.frame(matrix_casos$durations / 60) %>%
subset(select = c(144)) %>%
slice(-c(144)) %>%
rename(`Distancia (de carro, em min) a HEFMV` = V144) %>%
cbind(casos_p_matrix)
matrix_dist_carro_controlo <- as.data.frame(matrix_controlo$distances) %>%
subset(select = c(72)) %>%
slice(-c(72)) %>%
rename(`Distancia (de carro,em km) a HEFMV` = V72) %>%
cbind(controlo_p_matrix)
matrix_temp_carro_controlo <- as.data.frame(matrix_controlo$durations / 60) %>%
subset(select = c(72)) %>%
slice(-c(72)) %>%
rename(`Distancia (de carro,em min) a HEFMV` = V72) %>%
cbind(controlo_p_matrix)
Casos_com_dados <- Coord_casos %>%
left_join(matrix_dist_carro_casos) %>%
left_join(matrix_temp_carro_casos) %>%
merge(Resultados, by.x="ID Animal", by.y="ID animal") %>%
distinct()
Controlo_com_dados <- Coord_controlo %>%
left_join(matrix_dist_carro_controlo) %>%
left_join(matrix_temp_carro_controlo) %>%
merge(Resultados, by.x="ID Animal", by.y="ID animal") %>%
distinct()
LP <- Casos_com_dados %>%
# selecionar os que têm LP
filter(`Tipo SMS` == "LP")
PM <- Casos_com_dados %>%
# selecionar os que têm MP
filter(`Tipo SMS` == "PM")
LP_Show <- subset(LP, Show == "sim")
PM_Show <- subset(PM, Show == "sim")
Cont_Show <- subset(Coord_controlo, Show =="sim")
View(Coord_controlo)
View(Controlo_com_dados)
Cont_Show <- subset(Controlo_com_dados, Show =="sim")
mapa_barbara_show <- leaflet() %>%
addTiles() %>%
addProviderTiles(providers$CartoDB.Positron, group="Light") %>%
addProviderTiles(providers$CartoDB.DarkMatter, group="Dark") %>%
addCircleMarkers(data = LP_Show,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "LP",
radius = 2.5,
color = "yellow",
stroke = FALSE,
fillOpacity = 0.7) %>%
addCircleMarkers(data = PM_Show,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "PM",
radius = 2.5,
color = "green",
stroke = FALSE,
fillOpacity = 0.7) %>%
addCircleMarkers(data = Cont_Show ,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "Controlos",
radius = 2.5,
color = "red",
stroke = FALSE,
fillOpacity = 0.7) %>%
addLayersControl(baseGroups = c("Dark", "Light"),
overlayGroups = c("LP", "Controlos", "PM"),
options = layersControlOptions(collapsed = FALSE)) %>%
addLegend(values = "Controlo", group = "Controlos", position = "bottomleft", labels = "Controlo", colors= "red") %>%
addLegend(values = "PM", group = "PM", position = "bottomleft", labels = "PM", colors= "green") %>%
addLegend(values = "LP", group = "LP", position = "bottomleft", labels = "LP", colors= "yellow")
mapa_barbara_show
View(LP_Show)
