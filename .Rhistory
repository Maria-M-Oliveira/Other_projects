dim_time <- ncvar_get(nc_tmax, "time")
dim_temp <- ncvar_get(nc_tmax, "tx")
?ncatt_get
t_units <- ncatt_get(nc_tmax, "time", "units")
t_units
t_ustr <- strsplit(t_units$value, " ")
t_dstr <- strsplit(unlist(t_ustr)[3], "-")
date <- ymd(t_dstr)
date
coords <- as.matrix(expand.grid(dim_lon, dim_lat, dim_depth, date))
coords <- as.matrix(expand.grid(dim_lon, dim_lat, date))
?ncvar_get
dim_temp <- ncvar_get(nc_tmax, "tx", collapse_degen=FALSE)
nc_df <- data.frame(cbind(coords, dim_temp))
names(nc_df) <- c("lon", "lat","time", "temp")
head(na.omit(nc_df), 5)  # Display some non-NaN values for a visual check
csv_fname <- "temp_max.csv"
write.table(nc_df, csv_fname, row.names=FALSE, sep=";")
View(nc_tmax)
print(nc_tmax)
time_obs<- as.POSIXct(time, origin = “1981–01–01”, tz=”GMT”)
time_obs<- as.POSIXct(time, origin = "1950–01–01", tz="GMT")
library(tidyverse)
time_obs<- as.POSIXct(time, origin = "1950–01–01", tz="GMT")
time_obs<- as.POSIXct(dim_time, origin = "1950–01–01", tz="GMT")
t_units
dim_time
time_obs<- as.POSIXct(dim_time, origin = "1950–01–01", tz="GMT")
time_obs<- as.POSIXct(date, origin = "1950–01–01", tz="GMT")
lonlattime <- as.matrix(expand.grid(lon,lat,time_obs))
lonlattime <- as.matrix(expand.grid(dim_lon,dim_lat,time_obs))
nc_tmax
fillvalue <- ncatt_get(nc_tmax, "tx", "_FillValue")
dim_temp[dim_temp==fillvalue$value] <- NA
lswt_slice <- dim_temp[ , , 2123]
lswt_slice <- dim_temp[ , , 25]
# and why not, draw it out:
image(dim_lon, dim_lat, lswt_slice)
lswt_vec_long <- as.vector(dim_temp)
lswt_obs <- data.frame(cbind(lonlattime, lswt_vec_long))
head(lswt_obs)
colnames(lswt_obs) <- c(“Long”,”Lat”,”Date”,”Temp_Cel”)
colnames(lswt_obs) <- c("Long","Lat","Date","Temp_Cel")
head(lswt_obs)
lswt_final <- na.omit(lswt_obs)
lswt_final <- na.omit(lswt_obs)
lswt_final$Date <- as.Date(lswt_final$Date)
lswt_final$Temp_Cel<- as.double(lswt_final$Temp_Cel)
lswt_final <- lswt_final %>%
group_by(Date)
lswt_final
dim(lswt_final)
write.csv(as.data.frame(lswt_final), "GloboLakes_Atitlan_TS_95_16.csv", row.names=T)
max(lswt_final$Date)
min(lswt_final$Date)
nc_tmax
attributes(nc_tmax$var)
dim(dim_temp)
length(lswt_vec_long)
dim(lswt_final)
dim(lswt_obs)
lswt_final <- lswt_final %>%
group_by(Date) %>%
summarize(Mean_K = mean(LSWT_Kelvin))
lswt_final <- lswt_final %>%
group_by(Date) %>%
summarize(Mean_K = mean(Temp_Cel))
View(lswt_final)
rm(lswt_final)
lswt_final <- lswt_obs
lswt_final$Date <- as.Date(lswt_final$Date)
lswt_final$Temp_Cel<- as.double(lswt_final$Temp_Cel)
lswt_final
dim(lswt_final)
lswt_final <- lswt_final %>%
group_by(Date) %>%
summarize(Mean_K = mean(Temp_Cel))
max(dim_temp)
max(dim_time)
min(dim_time)
min(date)
max(date)
min(t_dstr)
max(t_units$value)
?strsplit
?dseconds
date <- ymd(t_dstr) + ddays(dim_time)
date
time_obs<- as.POSIXct(date, origin = "1950–01–01", tz="GMT")
lswt_slice <- dim_temp[ , , 2123]
lswt_slice <- dim_temp[ , , 25]
# and why not, draw it out:
image(dim_lon, dim_lat, lswt_slice)
lswt_vec_long <- as.vector(dim_temp)
lonlattime <- as.matrix(expand.grid(dim_lon,dim_lat,time_obs))
max(date)
rm(BD)
rm(BD_2)
rm(BD_sem_rep)
rm(csv_fname)
rm(coords)
rm(teste)
gc()
library(ncdf4)
library(lubridate)
library(tidyverse)
### DATA ###
nc_tmax <- nc_open("./ENSP/tx_ens_mean_0.25deg_reg_2011-2022_v27.0e.nc")
### DATA CLEANING ###
dim_lon <- ncvar_get(nc_tmax, "longitude")
dim_lat <- ncvar_get(nc_tmax, "latitude")
dim_time <- ncvar_get(nc_tmax, "time")
dim_temp <- ncvar_get(nc_tmax, "tx", collapse_degen=FALSE)
fillvalue <- ncatt_get(nc_tmax, "tx", "_FillValue")
dim_temp[dim_temp==fillvalue$value] <- NA
t_units <- ncatt_get(nc_tmax, "time", "units") #days since 1950-01-01 00:00
t_ustr <- strsplit(t_units$value, " ")
t_dstr <- strsplit(unlist(t_ustr)[3], "-")
date <- ymd(t_dstr) + ddays(dim_time)
date
time_obs<- as.POSIXct(date, origin = "1950–01–01", tz="GMT")
lswt_slice <- dim_temp[ , , 2123]
lswt_slice <- dim_temp[ , , 25]
# and why not, draw it out:
image(dim_lon, dim_lat, lswt_slice)
lswt_vec_long <- as.vector(dim_temp)
lonlattime <- as.matrix(expand.grid(dim_lon,dim_lat,time_obs))
memory.limit()
memory.limit(size = 35000)
lonlattime <- as.matrix(expand.grid(dim_lon,dim_lat,time_obs))
remotes::install_github("RS-eco/processNC", build_vignettes=T)
library(processNC)
library(terra)
library(raster)
remotes::install_github("RS-eco/processNC", build_vignettes=T)
remotes::install_github("RS-eco/processNC")
remotes::install_github("RS-eco/processNC")
remotes::install_github("RS-eco/processNC")
library(processNC)
?list.files
files <- list.files("./ENSP/dataset")
files
?subsetNC
teste <- subsetNC(files, startdate = 2017, enddate = 2022)
files <- list.files("./ENSP/dataset",
pattern="pr.*\\.nc", full.names=T)
teste <- subsetNC(files, startdate = 2017, enddate = 2022)
teste <- subsetNC(nc_tmax, startdate = 2017, enddate = 2022)
teste <- subsetNC("./ENSP/tx_ens_mean_0.25deg_reg_2011-2022_v27.0e.nc", startdate = 2017, enddate = 2022)
library(ncdf4)
library(lubridate)
library(tidyverse)
library(processNC)
library(terra)
library(raster)
teste <- subsetNC("./ENSP/tx_ens_mean_0.25deg_reg_2011-2022_v27.0e.nc", startdate = 2017, enddate = 2022)
### DATA ###
nc_tmax <- nc_open("./ENSP/tx_ens_mean_0.25deg_reg_2011-2022_v27.0e.nc")
teste <- subsetNC("./ENSP/tx_ens_mean_0.25deg_reg_2011-2022_v27.0e.nc", startdate = 2017, enddate = 2022)
nc_tmax<- subsetNC("./ENSP/tx_ens_mean_0.25deg_reg_2011-2022_v27.0e.nc", startdate = 2017, enddate = 2022)
### DATA CLEANING ###
dim_lon <- ncvar_get(nc_tmax, "longitude")
### DATA ###
nc_tmax <- nc_open("./ENSP/tx_ens_mean_0.25deg_reg_2011-2022_v27.0e.nc")
View(teste)
dim_lon <- ncvar_get(nc_tmax, "longitude")
dim_lat <- ncvar_get(nc_tmax, "latitude")
dim_time <- ncvar_get(nc_tmax, "time")
dim_temp <- ncvar_get(nc_tmax, "tx", collapse_degen=FALSE)
fillvalue <- ncatt_get(nc_tmax, "tx", "_FillValue")
dim_temp[dim_temp==fillvalue$value] <- NA
t_units <- ncatt_get(nc_tmax, "time", "units") #days since 1950-01-01 00:00
t_ustr <- strsplit(t_units$value, " ")
t_dstr <- strsplit(unlist(t_ustr)[3], "-")
date <- ymd(t_dstr) + ddays(dim_time)
date
time_obs<- as.POSIXct(date, origin = "1950–01–01", tz="GMT")
lswt_slice <- dim_temp[ , , 2123]
lswt_slice <- dim_temp[ , , 25]
# and why not, draw it out:
image(dim_lon, dim_lat, lswt_slice)
lswt_vec_long <- as.vector(dim_temp)
View(lswt_slice)
View(nc_tmax)
?writeCDF
lswt_slice <- dim_temp[ , , 2123]
lswt_slice <- dim_temp[ , , 25]
# and why not, draw it out:
image(dim_lon, dim_lat, lswt_slice)
View(BD_sem_rep)
x <- date => 01-01-2017
x <- date > 01-01-2017
x <- date[date > 01-01-2017]
x <- date[date > 2017-01-01]
x
date
### DATA ###
nc_tmax <- nc_open("./ENSP/tx_ens_mean_0.25deg_reg_2011-2022_v27.0e.nc")
library(ncdf4)
library(lubridate)
library(tidyverse)
library(processNC)
library(terra)
library(raster)
### DATA ###
nc_tmax <- nc_open("./ENSP/tx_ens_mean_0.25deg_reg_2011-2022_v27.0e.nc")
### DATA CLEANING ###
dim_lon <- ncvar_get(nc_tmax, "longitude")
dim_lat <- ncvar_get(nc_tmax, "latitude")
dim_time <- ncvar_get(nc_tmax, "time")
dim_temp <- ncvar_get(nc_tmax, "tx", collapse_degen=FALSE)
fillvalue <- ncatt_get(nc_tmax, "tx", "_FillValue")
dim_temp[dim_temp==fillvalue$value] <- NA
t_units <- ncatt_get(nc_tmax, "time", "units") #days since 1950-01-01 00:00
t_ustr <- strsplit(t_units$value, " ")
t_dstr <- strsplit(unlist(t_ustr)[3], "-")
date <- ymd(t_dstr) + ddays(dim_time)
date
time_obs<- as.POSIXct(date, origin = "1950–01–01", tz="GMT")
lswt_slice <- dim_temp[ , , 2123]
lswt_slice <- dim_temp[ , , 25]
# and why not, draw it out:
image(dim_lon, dim_lat, lswt_slice)
?ddays
teste<- subsetNC("./ENSP/tx_ens_mean_0.25deg_reg_2011-2022_v27.0e.nc", startdate = 2017, enddate = 2022)
writeCDF(teste, "./ENSP/teste")
writeCDF(teste, "./ENSP/teste.nc")
x <- nc_open("./ENSP/teste.nc")
dim_lon <- ncvar_get(x, "longitude")
dim_lat <- ncvar_get(x, "latitude")
dim_time <- ncvar_get(x, "time")
dim_temp <- ncvar_get(x, "tx", collapse_degen=FALSE)
x
t_units <- ncatt_get(x, "time", "units") #days since 1950-01-01 00:00
t_ustr <- strsplit(t_units$value, " ")
t_dstr <- strsplit(unlist(t_ustr)[3], "-")
date <- ymd(t_dstr) + ddays(dim_time)
date
time_obs<- as.POSIXct(date, origin = "1950–01–01", tz="GMT")
lswt_slice <- dim_temp[ , , 2123]
lswt_slice <- dim_temp[ , , 25]
# and why not, draw it out:
image(dim_lon, dim_lat, lswt_slice)
lswt_vec_long <- as.vector(dim_temp)
lonlattime <- as.matrix(expand.grid(dim_lon,dim_lat,time_obs))
x
nc_tmax
rast(x)
rast("./ENSP/teste.nc")
rast(("./ENSP/tx_ens_mean_0.25deg_reg_2011-2022_v27.0e.nc"))
### DATA CLEANING ###
dim_lon <- ncvar_get(nc_tmax, "longitude")
dim_lat <- ncvar_get(nc_tmax, "latitude")
dim_time <- ncvar_get(nc_tmax, "time")
dim_temp <- ncvar_get(nc_tmax, "tx", collapse_degen=FALSE)
fillvalue <- ncatt_get(nc_tmax, "tx", "_FillValue")
t_units <- ncatt_get(nc_tmax, "time", "units") #days since 1950-01-01 00:00
t_ustr <- strsplit(t_units$value, " ")
t_dstr <- strsplit(unlist(t_ustr)[3], "-")
date <- ymd(t_dstr) + ddays(dim_time)
date
time_obs<- as.POSIXct(date, origin = "1950–01–01", tz="GMT")
range(time_obs)
nc_close("./ENSP/teste.nc")
nc <- st_read(".\\Barbara\\Cont_AAD_CAOP2020", geometry_column = "geometry")
library(googledrive)
library(sf)
library(tidyverse)
nc <- st_read(".\\Barbara\\Cont_AAD_CAOP2020", geometry_column = "geometry")
nc <- st_read("Cont_AAD_CAOP2021", geometry_column = "geometry")
ee_nc_temp <- ee_extract(
x = temps_ar,
y = nc["geometry"], #Isto tem de ser alterado depois para o que quero mesmo
scale = 250,
fun = ee$Reducer$mean(),
sf = TRUE
)
library(rgee)
ee_nc_temp <- ee_extract(
x = temps_ar,
y = nc["geometry"], #Isto tem de ser alterado depois para o que quero mesmo
scale = 250,
fun = ee$Reducer$mean(),
sf = TRUE
)
temps_ar <- ee$ImageCollection("ECMWF/ERA5_LAND/DAILY_AGGR") %>%
ee$ImageCollection$filterDate("2017-01-02", "2022-12-31") %>%
ee$ImageCollection$map(function(x) x$select("temperature_2m_min")) %>% # Select only temperature bands
ee$ImageCollection$toBands() # from imagecollection to image
rgee::ee_Initialize()
ee_check()
ee_install()
ee_clean_pyenv()
library(rgee)
rgee::ee_Initialize()
ee_install()
library(rgee)
ee_check()
library(data.table)
library(tidyverse)
library(geosphere)
library(leaflet)
library(openrouteservice)
library(xlsx)
# Estou a correr o ors localmente com o docker, entao esta neste url
options(openrouteservice.url = "http://localhost:8080/ors")
#Loading and cleaning data
Barb <- fread(".\\Barbara\\Codigo Postal - Barbara.csv")
Moradas <- fread(".\\Barbara\\pt_addresses.csv", encoding = "UTF-8") %>%
unique %>%
mutate_if(is.character, str_to_lower) -> Moradas
Resultados <- fread(".\\Barbara\\Resultados.csv",encoding = "UTF-8") %>%
unique %>%
dplyr::select(-"Cód. postal")
Resultados <- Resultados[1:219,]
Resultados$`Tipo SMS` <- as.character(Resultados$`Tipo SMS`)
Resultados$`Tipo SMS` <- ifelse(is.na(Resultados$`Tipo SMS`),
'não', Resultados$`Tipo SMS`)
Barb <- subset(Barb, select = -V3) %>%
unique %>%
rename(Cod_Postal =`Codigo postal`)
Casos <- Barb[1:148, ]
Controlo <- Barb[150:220, ]
#Grouping with coords (sem converter para xy)
Controlo_com_Moradas <- merge(Controlo, Moradas[ ,c("city", "postcode", "lon", "lat")],
by.x = "Cod_Postal",
by.y = "postcode",
all.x = T) %>%
group_by(`ID Animal`) %>%
unique
Casos_com_Moradas <- merge(Casos, Moradas[ , c("city", "postcode", "lon", "lat")],
by.x = "Cod_Postal",
by.y = "postcode",
all.x = T) %>%
group_by(`ID Animal`) %>%
unique
# Calculo do centroide das coordenadas
findCentroid <- function(Lon, Lat, ...){
centroid(cbind(Lon, Lat), ...)
}
CasosDT <-setDT(Casos_com_Moradas) %>%
group_by(`ID Animal`) %>%
filter(n()>= 3) %>%
ungroup()
CasosDT <-setDT(CasosDT)
CasosDT[, c("Cent_lon", "Cent_lat") := as.list(findCentroid(lon, lat)), by = `ID Animal`]
Casos_centroide <- as.data.frame(CasosDT) %>%
subset(select=c("Cod_Postal","ID Animal","city","Cent_lon","Cent_lat")) %>%
group_by(`ID Animal`) %>%
unique
ControloDT <-setDT(Controlo_com_Moradas ) %>%
group_by(`ID Animal`) %>%
filter(n()>= 4) %>%
ungroup()
ControloDT <-setDT(ControloDT)
ControloDT[, c("Cent_lon", "Cent_lat") := as.list(findCentroid(lon, lat)), by = `ID Animal`]
Controlo_centroide <- as.data.frame(ControloDT) %>%
subset(select=c("Cod_Postal","ID Animal","city","Cent_lon","Cent_lat")) %>%
group_by(`ID Animal`) %>%
unique
# Agr juntar as Df pq tenho de ir buscar os que faltam pq tinham <3 ou <4 de pontos
Coord_casos <- Casos_com_Moradas %>%
group_by(`ID Animal`) %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:3)) %>%
merge(Casos_centroide, by.x = "ID Animal", by.y="ID Animal", all.x=TRUE) %>%
merge(Casos, by.x = "ID Animal", by.y="ID Animal") %>%
subset(select=-c(4))
Coord_casos$Cent_lon <- ifelse(is.na(Coord_casos$Cent_lon), Coord_casos$lon, Coord_casos$Cent_lon)
Coord_casos$Cent_lat <- ifelse(is.na(Coord_casos$Cent_lat), Coord_casos$lat, Coord_casos$Cent_lat)
Coord_casos <- Coord_casos[,c(1,7,4:6)]
Coord_casos<- Coord_casos %>%
rename(lat=Cent_lat) %>%
rename(lon=Cent_lon)
Coord_controlo <- Controlo_com_Moradas  %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:3)) %>%
merge(Controlo_centroide, by.x = "ID Animal", by.y="ID Animal", all.x=TRUE) %>%
merge(Controlo, by.x = "ID Animal", by.y="ID Animal") %>%
subset(select=-c(4))
Coord_controlo$Cent_lon <- ifelse(is.na(Coord_controlo$Cent_lon), Coord_controlo$lon, Coord_controlo$Cent_lon)
Coord_controlo$Cent_lat <- ifelse(is.na(Coord_controlo$Cent_lat), Coord_controlo$lat, Coord_controlo$Cent_lat)
Coord_controlo <- Coord_controlo[,c(1,7,4:6)]
Coord_controlo <- Coord_controlo %>%
rename(lat=Cent_lat) %>%
rename(lon=Cent_lon)
# Routing now
# Directions to FMV UL from controlo points
# Careful, coordinates must be in order, meaning i need to add to the dfs FMV's coords in order
controlo_para_dir <- Coord_controlo %>%
group_by(`ID Animal`) %>%
group_modify(~add_row
(lon=-9.195503158186124, lat=38.7139285562482,.x)) %>%
ungroup() %>%
dplyr:: select(lon, lat)
controlos_dir <- ors_directions(controlo_para_dir)
Coord_controlo <- Controlo_com_Moradas  %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:3)) %>%
merge(Controlo_centroide, by.x = "ID Animal", by.y="ID Animal", all.x=TRUE) %>%
merge(Controlo, by.x = "ID Animal", by.y="ID Animal") %>%
subset(select=-c(4))
View(Controlo)
# Agr juntar as Df pq tenho de ir buscar os que faltam pq tinham <3 ou <4 de pontos
Coord_casos <- Casos_com_Moradas %>%
group_by(`ID Animal`) %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:3)) %>%
merge(Casos_centroide, by.x = "ID Animal", by.y="ID Animal", all.x=TRUE)
Coord_casos <- Casos_com_Moradas %>%
group_by(`ID Animal`) %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:3)) %>%
merge(Casos_centroide, by.x = "ID Animal", by.y="ID Animal", all.x=TRUE) %>%
merge(Casos, by.x = "ID Animal", by.y="ID Animal")
# Agr juntar as Df pq tenho de ir buscar os que faltam pq tinham <3 ou <4 de pontos
Coord_casos <- Casos_com_Moradas %>%
group_by(`ID Animal`) %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:3)) %>%
merge(Casos_centroide, by.x = "ID Animal", by.y="ID Animal", all.x=TRUE) %>%
merge(Casos, by.x = "ID Animal", by.y="ID Animal") %>%
subset(select=-c(4))
Coord_casos$Cent_lon <- ifelse(is.na(Coord_casos$Cent_lon), Coord_casos$lon, Coord_casos$Cent_lon)
Coord_casos$Cent_lat <- ifelse(is.na(Coord_casos$Cent_lat), Coord_casos$lat, Coord_casos$Cent_lat)
Coord_casos <- Coord_casos[,c(1,7,4:6)]
Coord_casos<- Coord_casos %>%
rename(lat=Cent_lat) %>%
rename(lon=Cent_lon)
Coord_controlo <- Controlo_com_Moradas  %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:3)) %>%
merge(Controlo_centroide, by.x = "ID Animal", by.y="ID Animal", all.x=TRUE) %>%
merge(Controlo, by.x = "ID Animal", by.y="ID Animal") %>%
subset(select=-c(4))
Coord_controlo <- Controlo_com_Moradas  %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:3)) %>%
merge(Controlo_centroide, by.x = "ID Animal", by.y="ID Animal", all.x=TRUE)
View(Casos_com_Moradas)
View(Controlo_centroide)
View(Controlo_com_Moradas)
Coord_controlo <- Controlo_com_Moradas  %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:3))
View(Coord_controlo)
Coord_controlo <- Controlo_com_Moradas  %>%
summarise(across(.fns = mean))
View(Coord_controlo)
Coord_controlo <- Controlo_com_Moradas  %>%
group_by(`ID Animal`) %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:3)) %>%
merge(Controlo_centroide, by.x = "ID Animal", by.y="ID Animal", all.x=TRUE) %>%
merge(Controlo, by.x = "ID Animal", by.y="ID Animal") %>%
subset(select=-c(4))
Coord_controlo$Cent_lon <- ifelse(is.na(Coord_controlo$Cent_lon), Coord_controlo$lon, Coord_controlo$Cent_lon)
Coord_controlo$Cent_lat <- ifelse(is.na(Coord_controlo$Cent_lat), Coord_controlo$lat, Coord_controlo$Cent_lat)
Coord_controlo <- Coord_controlo[,c(1,7,4:6)]
Coord_controlo <- Coord_controlo %>%
rename(lat=Cent_lat) %>%
rename(lon=Cent_lon)
controlo_para_dir <- Coord_controlo %>%
group_by(`ID Animal`) %>%
group_modify(~add_row
(lon=-9.195503158186124, lat=38.7139285562482,.x)) %>%
ungroup() %>%
dplyr:: select(lon, lat)
controlos_dir <- ors_directions(controlo_para_dir)
casos_para_dir <- Coord_casos %>%
group_by(`ID Animal`) %>%
drop_na() %>%
subset(city!="funchal") %>% #Retirar a madeira pq n dá rota né
group_modify(~add_row
(lon=-9.195503158186124, lat=38.7139285562482,.x)) %>%
ungroup() %>%
dplyr:: select(lon, lat)
casos_dir <- ors_directions(casos_para_dir)
### Mapa com routes e pontos
# Mudar para pontos de controlos, caos com LP e casos com MP
leaflet_map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = Coord_casos,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "Casos",
radius = 2.5,
color = "blue",
stroke = FALSE,
fillOpacity = 0.7) %>%
addCircleMarkers(data = Coord_controlo,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`ID Animal`,
group = "Controlos",
radius = 2.5,
color = "red",
stroke = FALSE,
fillOpacity = 0.7) %>%
addGeoJSON(casos_dir,
fill = FALSE,
group="Casos") %>%
addGeoJSON(controlos_dir,
fill = FALSE,
color = "red",
group="Controlos") %>%
addLayersControl(overlayGroups = c("Casos", "Controlos"),
options = layersControlOptions(collapsed = FALSE))
leaflet_map
