library(data.table)
library(dplyr)
library(leaflet)
library(rgeos)
library(ggplot2)
library(sf)
library(sp)
library(rgdal)
library(maptools)
library(tidyverse)
#Loading and cleaning data
Barb <- fread("CÃ³digo Postal - BÃ¡rbara.csv")
#Loading and cleaning data
Barb <- fread("Código Postal - Bárbara.csv")
#Loading and cleaning data
Barb <- fread(".\\Código Postal - Bárbara.csv")
getwd()
#Loading and cleaning data
Barb <- fread(".\\Barbara\\Código Postal - Bárbara.csv")
Barbclean <- subset(Barb, select = -c( V4 : V26 )) %>%
unique
Barbcleanclean <- Barbclean[1:148, ]
#Making sure we dont lose the control group, extracting and creating a new df
Controlo <- Barbclean[150:220, ] %>%
subset(select = -V3)
Moradas <- fread("pt_addresses.csv") %>%
unique
Moradas <- fread("pt_addresses.csv") %>%
unique
Moradas <- fread(".\\Barbara\\pt_addresses.csv") %>%
unique
#Grouping and taking the average of the coords (without converting into xy)
Conjuncture_Controlo_Moradas <- merge(Controlo, Moradas[ ,c("city", "postcode", "lon", "lat")],
by.x = "CÃ³digo postal",
by.y = "postcode",
all.x = T) %>%
group_by(`ID Animal`) %>%
unique
Conjuncture_Barb_Moradas <- merge(Barbcleanclean, Moradas[ , c("city", "postcode", "lon", "lat")],
by.x = "CÃ³digo postal",
by.y = "postcode",
all.x = T) %>%
group_by(`ID Animal`) %>%
unique
#Plotting the minimum convex polygon, full guide here:
#"https://jamesepaterson.github.io/jamespatersonblog/03_trackingworkshop_homeranges#:~:text=The%20minimum%20convex%20polygon%20"
#Removing NA's
#Remover ID's que tenham menos de 5 obs, mcp nÃ£o funciona otherwise
Conjuncture_Controlo_wna <- Conjuncture_Controlo_Moradas[!is.na(Conjuncture_Controlo_Moradas$lon) & !is.na(Conjuncture_Controlo_Moradas$lat), ]%>%
group_by(`ID Animal`) %>%
filter(n()>= 5) %>%
ungroup()
Conjuncture_Barb_wna <- Conjuncture_Barb_Moradas[!is.na(Conjuncture_Barb_Moradas$lon) & !is.na(Conjuncture_Barb_Moradas$lat), ]%>%
group_by(`ID Animal`) %>%
filter(n()>= 5) %>%
ungroup()
#Simplifying the sets
Controlo.sp <- Conjuncture_Controlo_wna[, c("ID Animal", "lon", "lat")]
Barb.sp <- Conjuncture_Barb_wna[, c("ID Animal", "lon", "lat")]
#Attributting coords
#https://stackoverflow.com/questions/68157684/set-crs-for-latitude-longitude-point-data
coordinates(Controlo.sp) <- c("lon", "lat")
coordinates(Barb.sp) <- c("lon", "lat")
#WGS84 is referenced to The International Reference Meridian.
#WGS84 lat/long coordinates are stationary with respect to the average of all
#global tectonic motions
proj4string(Controlo.sp) <- CRS("+init=epsg:4326 +proj=longlat +ellips=WGS84  +no_defs")
proj4string(Barb.sp) <- CRS("+init=epsg:4326 +proj=longlat +ellips=WGS84 +no_defs")
library(adehabitatHR)
Controlo.mcp <- mcp(Controlo.sp, percent = 95)
Barb.mcp <- mcp(Barb.sp, percent = 95)
library(scales)
plot(Controlo.mcp, col = as.factor(Controlo.mcp@data$id), pch = 16)
plot(Barb.mcp, col = alpha(1:5, 0.5), add = T)
#Now that we have the polygons, we need to calculate the centroids
#https://gis.stackexchange.com/questions/43543/how-to-calculate-polygon-centroids-in-r-for-non-contiguous-shapes
#Using rgeos pack and
#Using sp to convert into a spatialpointsdataframe so it can be plotted
Centroid_Barb <- gCentroid(Barb.mcp, byid = T)
SPDF_Centroid_Barb  <- SpatialPointsDataFrame(Centroid_Barb, data.frame(row.names = row.names(Centroid_Barb)))
Centroid_Controlo <- gCentroid(Controlo.mcp, byid = T)
SPDF_Centroid_Controlo  <- SpatialPointsDataFrame(Centroid_Controlo, data.frame(row.names = row.names(Centroid_Controlo)))
#Stitching them together
Coord_Barb_Morad_Simp <- Conjuncture_Barb_Moradas %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:4)) %>%
merge(Barbcleanclean, by = "ID Animal")
Coord_Control_Morad_Simp <- Conjuncture_Controlo_Moradas %>%
summarise(across(.fns = mean)) %>%
subset(select = -c(2:3)) %>%
merge(Controlo, by = "ID Animal")
#Trying a plot
map <- leaflet() %>%
addProviderTiles(providers$CartoDB.DarkMatter, group = "Dark") %>%
addProviderTiles(provider = "Esri", group = "Light") %>%
addCircleMarkers(data = Conjuncture_Barb_Moradas,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`CÃ³digo postal`,
group = "Cases",
clusterOptions = NULL,
radius = 2.5,
color = "red",
stroke = FALSE,
fillOpacity = 0.5) %>%
addCircleMarkers(data = Conjuncture_Controlo_Moradas,
lng = ~lon,
lat = ~lat,
popup = ~`ID Animal`,
label = ~`CÃ³digo postal`,
group = "Controls",
radius = 2.5,
color = "blue",
stroke = FALSE,
fillOpacity = 0.7) %>%
addCircleMarkers(data = SPDF_Centroid_Barb,
group = "Centroids",
radius = 2.5,
color = "orange",
stroke = FALSE,
fillOpacity = 0.7) %>%
addCircles(data = SPDF_Centroid_Controlo,
group = "Centroids",
radius = 2.5,
color = "orange",
stroke = FALSE,
fillOpacity = 0.7) %>%
addPolygons(data = Controlo.mcp,
popup = ~id,
color = "Darkblue",
group = "Polygons") %>%
addPolygons(data = Barb.mcp,
popup = ~id,
color = "Yellow",
group = "Polygons") %>%
addLayersControl(baseGroups = c("Dark", "Light"),
overlayGroups = c("Cases", "Centroids", "Controls", "Official", "Polygons"),
options = layersControlOptions(collapsed = FALSE))
map
#Uploading and cleaning shape files
PT <-readOGR("Cont_AAD_CAOP2020")
names(PT)
#Uploading and cleaning shape files
PT <-readOGR(".\\Barbara\\Cont_AAD_CAOP2020")
names(PT)
PT_Lisb <- PT[PT$Distrito == "Lisboa",]
PT_Sant <- PT[PT$Distrito == "SantarÃ©m",]
PT_Evor <- PT[PT$Distrito == "?vora",]
PT_Setu <- PT[PT$Distrito == "SetÃºbal",]
PT_Mad <- readOGR("ArqMadeira_AAd_CAOP2020")
PT_Mad <- readOGR(".\\Barbara\\ArqMadeira_AAd_CAOP2020")
PT_Clean <- rbind(PT_Lisb, PT_Evor) %>%
rbind(PT_Sant) %>%
rbind(PT_Setu)
library(openrouteservice)
library(mapview)
# Cada key e pessoal, ver se funciona no teu tb
ors_api_key("5b3ce3597851110001cf6248a219fc66105d4bc5bacf80a7fbb1aab0")
mapviewOptions(fgb = FALSE)
coordinates <- data.frame(lon = c(-9.195503158186124) , lat = c(38.71392855624822))
res <- ors_isochrones(coordinates, range = 3600, interval = 1200, output = "sf")
res
values <- levels(factor(res$value))
ranges <- split(res, values)
ranges <- ranges[rev(values)]
names(ranges) <- sprintf("%s min", as.numeric(names(ranges))/60)
mapview(ranges, alpha.regions = 0.2, homebutton = FALSE, legend = FALSE)
res <- ors_isochrones(coordinates, range = 4800, interval = 1200, output = "sf")
# Versao com o ORS
# ATENCAO QUE NADA ISTO ESTA A FUNCIONAR, E SO PARA TERES NOCAO DO QUE SE PASSA
# Directions to FMV UL from controlo points
# Careful, coordinates must be in order, meaning i need to add to the dfs FMV's coords in order
Coord_controlo_limpo <- Coord_Control_Morad_Simp %>%
dplyr:: select(lon, lat)
FMV_coord <- c(-9.195503158186124, 38.7139285562482)
Coord_controlo_limpo_1 <- Coord_controlo_limpo [37:71,]
Coord_controlo_limpo_2 <- Coord_controlo_limpo [1:36,]
x <- ors_directions(Coord_controlo_limpo_2)
y <- ors_directions(Coord_controlo_limpo_1)
# Directions to FMV UL from case points
Coord_Barb_limpo <- select(Coord_Barb_Morad_Simp, lon, lat)
Coord_Barb_limpo1 <- Coord_Barb_limpo [1:70,]  %>% drop_na()
Coord_Barb_limpo2 <- Coord_Barb_limpo [71:140,] %>% drop_na()
Coord_Barb_limpo3 <- Coord_Barb_limpo [141:148,] %>% drop_na()
View(Coord_Barb_Morad_Simp)
# Directions to FMV UL from case points
Coord_Barb_limpo <- select(Coord_Barb_Morad_Simp, lon, lat)
# Tentar com o stplanr
# Isto nem e bem o stplanr pq estava a dar erro, so peguei mesmo no osrm ate agr pq e esperto enough para pegar na 1a linha da tabela
library(osrm)
library(stplanr)
trip <- osrmRoute(
FMV_coord,
dst= Coord_controlo_limpo[],
returnclass = "sf"
)
mapview::mapview(trip)
?osrmRoute
trip <- osrmRoute(
FMV_coord,
dst= Coord_controlo_limpo[1,],
returnclass = "sf"
)
mapview::mapview(trip)
trip <- osrmRoute(
FMV_coord,
lov= Coord_controlo_limpo[1,],
returnclass = "sf"
)
trip <- osrmRoute(
FMV_coord,
loc= Coord_controlo_limpo[1,],
returnclass = "sf"
)
mapview::mapview(trip)
trip <- osrmRoute(
FMV_coord,
loc= Coord_controlo_limpo,
returnclass = "sf"
)
mapview::mapview(trip)
trip <- osrmRoute(
FMV_coord,
dst= Coord_controlo_limpo[],
returnclass = "sf"
)
mapview::mapview(trip)
?od2line
teste <- od2line(flow=Coord_controlo_limpo, zone=cents_sf)
teste <- od2line(flow=Coord_controlo_limpo, zone=cents_sf(Coord_controlo_limpo))
teste <- od2line(flow=Coord_controlo_limpo, zone=(cents_sf(Coord_controlo_limpo)))
od_data_sample[1:3, 1:3]
cents_sf[1:3,]
desire_lines <- Coord_controlo_limpo[2,]
trip <- osrmRoute(
FMV_coord,
dst= Coord_controlo_limpo,
returnclass = "sf"
) %>% route(l = desire_lines,
route_fun = osrmRoute,
returnclass = "sf")
mapview::mapview(trip)
desire_lines <- Coord_controlo_limpo[2:,]
desire_lines <- Coord_controlo_limpo[2:71,]
trip <- osrmRoute(
FMV_coord,
dst= Coord_controlo_limpo,
returnclass = "sf"
) %>% route(l = desire_lines,
route_fun = osrmRoute,
returnclass = "sf")
mapview::mapview(trip)
mapview::mapview(trip) + mapview(desire_lines)
?route
trip <- route(
FMV_coord,
dst= Coord_controlo_limpo[],
route_fun = osrmRoute()
returnclass = "sf"
)
trip <- route(
FMV_coord,
dst= Coord_controlo_limpo[],
route_fun = osrmRoute(),
returnclass = "sf"
)
mapview::mapview(trip)
install.packages('r5r')
# Teste numero 4?
library(r5r)
# Teste numero 4?
options(java.parameters = "-Xmx2G")
library(r5r)
mapviewOptions(platform = 'leafgl')
r5r_core <- setup_r5(data_path = Coord_Barb_limpo, verbose = FALSE)
r5r_core <- setup_r5(data_path = Coord_controlo_limpo, verbose = FALSE)
?setup_r5
getwd
getwd()
r5r_core <- setup_r5(data_path = "C:/Users/olive/Documents/GitHub/Other_projects", verbose = FALSE)
rJava::.jgc(R.gc = TRUE)
?rbind
# Tentativas de adicionar as coord em ordem, desisti por agora
for (row in Coord_controlo_limpo) {
Coord_controlo_limpo %>% add_row(lat=8.71392855624822, lon= -9.195503158186124, .after= n)
print(Coord_controlo_limpo)
}
# Tentativas de adicionar as coord em ordem, desisti por agora
for (row in Coord_controlo_limpo) {
Coord_controlo_limpo %>% rbind(lat=8.71392855624822, lon= -9.195503158186124, .after= n)
print(Coord_controlo_limpo)
}
# Coord_controlo_limpo[nrow(Coord_controlo_limpo) + 1,] = list(-9.195503158186124, 38.71392855624822)
u <- lapply(Coord_controlo_limpo, rbind(-9.195503158186124, 38.7139285562482))
# Coord_controlo_limpo[nrow(Coord_controlo_limpo) + 1,] = list(-9.195503158186124, 38.71392855624822)
u <- lapply(Coord_controlo_limpo, rbind(FMV_coord))
# Coord_controlo_limpo[nrow(Coord_controlo_limpo) + 1,] = list(-9.195503158186124, 38.71392855624822)
u <- lapply(Coord_controlo_limpo, rbind(Coord_controlo_limpo, FMV_coord))
# O mapa e possivel fazer, mas o que te vai acontecer antes de se arrumar as coordenadas em ordem, e que vais ter o caminho de uns CP para outros
leaflet() %>%
addTiles() %>%
addGeoJSON(x, fill=FALSE) %>%
addGeoJSON(y, fill=FALSE) %>%
addGeoJSON(xx, fill=FALSE) %>%
# addGeoJSON(yy, fill=FALSE) %>%
addGeoJSON(zz, fill=FALSE) %>%
fitBBox(x$bbox)
# Versao com o ORS
# ATENCAO QUE NADA ISTO ESTA A FUNCIONAR, E SO PARA TERES NOCAO DO QUE SE PASSA
# Directions to FMV UL from controlo points
# Careful, coordinates must be in order, meaning i need to add to the dfs FMV's coords in order
Coord_controlo_limpo <- Coord_Control_Morad_Simp %>%
dplyr:: select(lon, lat)
FMV_coord <- c(-9.195503158186124, 38.7139285562482)
Coord_controlo_limpo_1 <- Coord_controlo_limpo [37:71,]
Coord_controlo_limpo_2 <- Coord_controlo_limpo [1:36,]
x <- ors_directions(Coord_controlo_limpo_2)
y <- ors_directions(Coord_controlo_limpo_1)
# Directions to FMV UL from case points
Coord_Barb_limpo <- select(Coord_Barb_Morad_Simp, lon, lat)
Coord_Barb_limpo1 <- Coord_Barb_limpo [1:70,]  %>% drop_na()
View(Coord_Barb_Morad_Simp)
# Directions to FMV UL from case points
Coord_Barb_limpo <- dplyr:: select(Coord_Barb_Morad_Simp, lon, lat)
Coord_Barb_limpo1 <- Coord_Barb_limpo [1:70,]  %>% drop_na()
Coord_Barb_limpo2 <- Coord_Barb_limpo [71:140,] %>% drop_na()
Coord_Barb_limpo3 <- Coord_Barb_limpo [141:148,] %>% drop_na()
# Ora aqui ha outro problema que e nao haver direÃ§oes obviamente do funchal para a fmv pronto (acho que Ã© o yy)
xx <- ors_directions(Coord_Barb_limpo1)
yy <- ors_directions(Coord_Barb_limpo2)
zz <- ors_directions(Coord_Barb_limpo3)
# O mapa e possivel fazer, mas o que te vai acontecer antes de se arrumar as coordenadas em ordem, e que vais ter o caminho de uns CP para outros
leaflet() %>%
addTiles() %>%
addGeoJSON(x, fill=FALSE) %>%
addGeoJSON(y, fill=FALSE) %>%
addGeoJSON(xx, fill=FALSE) %>%
# addGeoJSON(yy, fill=FALSE) %>%
addGeoJSON(zz, fill=FALSE) %>%
fitBBox(x$bbox)
